
(NE) ## Handle Master Dying
 - go to super master, but continue to check our old one
 - we don't register with the super master, we treat it simply
   as a source, like an exit library does with its parents
 - implementation thing: error needs to be special if it is the master that we killed while looking for a chunk.

(NE) ## Child flaps
 - Child will then register when the master thinks he's alive, which is weird
 - handle the death, then accept.

(LS) ## More "Correct Operation"
 - periodically requerying the master
 - the master load balances by doing it randomally

(LS) ## Hierarchy goals
 - two layers, so we need to set up a simple
   test for that.
 - combine peer and master into a "node"
 - figure out how to get video into the system
 - get video out

(LS) ## Chunk Store
 - handle deletion - LRU
 - handle marking chunks as "undeleteable" - for this we will need to reap stale streams


--------------

streamamanger - stream id if given wrong one
timeout -- handle out of orders
?? wrong file requested on same stream

implement a client pool
cleanign streams

us  - write scripts :D :D :D 
